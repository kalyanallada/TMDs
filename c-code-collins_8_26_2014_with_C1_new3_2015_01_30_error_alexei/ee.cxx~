#include <omp.h>
#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include "TSystem.h"
#include "TMath.h"
#include "Math/Interpolator.h"
#include "Math/Integrator.h"
#include "Math/IntegratorMultiDim.h"
#include "Math/AllIntegrationTypes.h"
#include "Math/Functor.h"
#include "Math/GaussIntegrator.h"
#include "TMinuit.h"
#include "TCanvas.h"
#include "TGraph.h"
#include "TGraphErrors.h"
#include "TAxis.h"
#include "TLegend.h"
#include "TH1F.h"
#include "gsl/gsl_sf_bessel.h"
#include "gsl/gsl_sf_gamma.h"
#include <Math/SpecFuncMathCore.h>
#include "TLatex.h"
#include "hoppet_v1.h"
#include <ctime>

const int n=20;
 double x1[n];

#define Log log
#define Power pow

 using namespace std;
// extern "C" {
//   void setct10_(int * iset);
// }

// extern "C" {
//   double ct10pdf_(int * iparton, double * x, double * q);
// }


//  double pdf ( int  iparton , double  x , double q2  ) 
// { int Iset = 100; 
//  setct10_(&Iset);
//  double q = sqrt(q2);
// return ct10pdf_(&iparton,&x,&q);

// } 

typedef struct { int FINI; } mycommonF77;


extern mycommonF77 fraginid_;




extern "C" {
void fdss_(int*IH,int*IC,int*IO,double*X,double*Q2,double*U,double*UB,
double*D,double*DB,double*S,double*SB,double*C,double*B,double*GL);
}

 double ffu (int hadron,int charge ,double x,double q2) 
{
int IO=1;
 double U, UB, D, DB, S, SB, C, B, GL;
fdss_(&hadron,&charge,&IO,&x,&q2,&U,&UB,&D,&DB,&S,&SB,&C,&B,&GL);
 return U/x;
} 

 double ffub (int hadron,int charge ,double x,double q2) 
{int IO=1;
 double U, UB, D, DB, S, SB, C, B, GL;
fdss_(&hadron,&charge,&IO,&x,&q2,&U,&UB,&D,&DB,&S,&SB,&C,&B,&GL);
 return UB/x;
} 

 double ffd (int hadron,int charge ,double x,double q2) 
{int IO=1;
 double U, UB, D, DB, S, SB, C, B, GL;
fdss_(&hadron,&charge,&IO,&x,&q2,&U,&UB,&D,&DB,&S,&SB,&C,&B,&GL);
 return D/x;
} 

 double ffdb (int hadron,int charge ,double x,double q2) 
{int IO=1;
 double U, UB, D, DB, S, SB, C, B, GL;
fdss_(&hadron,&charge,&IO,&x,&q2,&U,&UB,&D,&DB,&S,&SB,&C,&B,&GL);
 return DB/x;
} 

 double ffs (int hadron,int charge ,double x,double q2) 
{int IO=1;
 double U, UB, D, DB, S, SB, C, B, GL;
fdss_(&hadron,&charge,&IO,&x,&q2,&U,&UB,&D,&DB,&S,&SB,&C,&B,&GL);
 return S/x;
} 

 double ffsb (int hadron,int charge ,double x,double q2) 
{int IO=1;
 double U, UB, D, DB, S, SB, C, B, GL;
fdss_(&hadron,&charge,&IO,&x,&q2,&U,&UB,&D,&DB,&S,&SB,&C,&B,&GL);
 return SB/x;
} 

 double ffg (int hadron,int charge ,double x,double q2) 
{int IO=1;
 double U, UB, D, DB, S, SB, C, B, GL;
fdss_(&hadron,&charge,&IO,&x,&q2,&U,&UB,&D,&DB,&S,&SB,&C,&B,&GL);
 return GL/x;
} 

const double pi= TMath::Pi(); 
 double S;
const double compass=160.0*2*0.94;
const double hermas=27.6*2*0.94;
const double alf=1.0/137;
const double C1=2.0*exp(-TMath::EulerGamma());
const double nf=4.0;
const double CA=3.0;
const double CF=4.0/3;
const double Bb0=(11.0-(2.0/3)*nf);
const double LQCD2=0.1*0.1;
const double Mp=0.93;


double Singma0( double Q2 , double Si ,double x )
{
return (2*pi*alf*alf)*(1+(1-Q2/(x*Si))*(1-Q2/(x*Si)))/(Q2*Q2);
}

const double A1=CF;
const double B1=-(3.0/2)*CF;

//const double Q02=2.4;
const double bm=1.5;



const double LQCD2_5=0.225*0.225;
const double LQCD2_4=0.326*0.326;
const double LQCD2_3=0.372*0.372;



double nff( double X  )

{

  if ( X > 4.75*4.75   )
    {
      return 5.0 ;
    }else{

  if ( X <1.3*1.3   )
    {
      return 3.0 ;
    }else{

    return 4.0;

}}}


double Bb0f( double X  )

{
  return (11.0-(2.0/3.0)*nff(X));

}


double Bb1f( double X  )

{
  return 102.0-38.0*nff(X)/3.0;

}

double LQCD2f( double X  )

{

  if ( X > 4.75*4.75   )
    {
      return LQCD2_5  ;
    }else{

  if ( X <1.3*1.3  )
    {
      return LQCD2_3 ;
    }else{

    return LQCD2_4;

}}}





double as ( double X )
{ 

 

  double X2=X;

     return 4*pi*(1/(Bb0f(X2)*Log(X/LQCD2f(X2))) - (Bb1f(X2)*Log(Log(X/LQCD2f(X2))))/(Power(Bb0f(X2),3)*Power(Log(X/LQCD2f(X2)),2)));

  

  // return 0.118-Bb0f(X2)*(0.118)*(0.118)*log(X/92.0/92.0)/2.0/pi/2.0;

 }



const double re3=1.202;
const double Nc=3.0;






double Sudakovkernel( double mu2 , double Q2  ,double LQCD2,double nf   )
{



double Bb0=(11.0-(2.0/3)*nf);
 
 double Bb1=102.0-38.0*nf/3;
 double A1=CF;
 double A2= CF*((67.0/36.0-pi*pi/12.0)*CA-5.0/18.0*nf);
 double B1=-(3.0/2.0)*CF;
 // double B2=CF*CF*(pi*pi/4.0-3.0/16.0-3*re3)+CF*Nc*(11.0/36.0*pi*pi-193.0/48.0+3.0/2.0*re3)+CF*nf*(-1.0/18.0*pi*pi+17.0/24.0);
 double B2=0;
return

(2*(54*A1*Power(Bb0,5)*Power(Log(mu2/LQCD2),4)*(-1 + Log(Log(mu2/LQCD2))) - 
       8*Power(Bb1,2)*(B2 + A2*Log(Q2/mu2))*(2 + 6*Log(Log(mu2/LQCD2)) + 9*Power(Log(Log(mu2/LQCD2)),2)) + 
       27*Power(Bb0,3)*Power(Log(mu2/LQCD2),3)*(-8*A2*Bb0 + 2*A1*Bb1 + 2*(-4*A2*Bb0 + B1*Power(Bb0,2) + A1*Bb1
 + A1*Power(Bb0,2)*Log(Q2/mu2))*Log(Log(mu2/LQCD2)) + 
          A1*Bb1*Power(Log(Log(mu2/LQCD2)),2)) + 2*Bb1*Log(mu2/LQCD2)*
        (54*B2*Power(Bb0,2) + 19*A2*Bb1 + 6*(18*B2*Power(Bb0,2) + 5*A2*Bb1)*Log(Log(mu2/LQCD2)) + 18*A2*Bb1*Power(Log(Log(mu2/LQCD2)),2) + 
          54*A2*Power(Bb0,2)*Log(Q2/mu2)*(1 + 2*Log(Log(mu2/LQCD2)))) - 
       54*Power(Bb0,2)*Power(Log(mu2/LQCD2),2)*(4*B2*Power(Bb0,2) + 6*A2*Bb1 - B1*Bb0*Bb1 + (4*A2 - B1*Bb0)*Bb1*Log(Log(mu2/LQCD2)) + 
						Bb0*Log(Q2/mu2)*(4*A2*Bb0 - A1*Bb1
 - A1*Bb1*Log(Log(mu2/LQCD2))))))/(27.*Power(Bb0,6)*Power(Log(mu2/LQCD2),3));


}



double Sudakov1( double Q2 , double b )
{

  double bs2= b*b/(1+b*b/(bm*bm) )/C1/C1;


 if ( 1.0/bs2 > 4.75*4.75  ){

  

   double upL1= Sudakovkernel( Q2 ,  Q2  , LQCD2_5 ,5.0  );


   double downL1= Sudakovkernel( 1/bs2 , Q2 ,   LQCD2_5 ,5.0    );



 return exp(-(upL1-downL1));


}

 if ( 1.0/bs2 < 1.3*1.3  ){

 
 

 double upL1= Sudakovkernel( Q2 ,  Q2  ,  LQCD2_5 ,5.0   );

 double downL1= Sudakovkernel( 4.75*4.75 ,  Q2   , LQCD2_5   ,5.0   );



 double upL2= Sudakovkernel( 4.75*4.75 ,  Q2  ,   LQCD2_4 ,4.0   );

 double downL2= Sudakovkernel( 1.3*1.3 ,  Q2  ,   LQCD2_4 ,4.0   );



 double upL3= Sudakovkernel( 1.3*1.3 ,  Q2    ,   LQCD2_3 ,3.0  );

 double downL3= Sudakovkernel( 1/bs2 ,  Q2    ,   LQCD2_3 ,3.0  );


 return exp(-(upL1+upL2+upL3-downL1-downL2-downL3));}

else{

 
 

  double upL1= Sudakovkernel( Q2 ,  Q2  , LQCD2_5 ,5.0   );

  double downL1= Sudakovkernel( 4.75*4.75 ,  Q2   , LQCD2_5 ,5.0  );


 double upL2= Sudakovkernel( 4.75*4.75 ,  Q2   ,   LQCD2_4 ,4.0  );

double downL2= Sudakovkernel( 1/bs2 ,  Q2     ,   LQCD2_4 ,4.0 );




 return exp(-(upL1+upL2-downL1-downL2));}




}






double Sudakov2( double Q2 ,double b )
{
double g2=0.827;
 
  double Q12=2.4;
  
 double bs2= b*b/(1+b*b/(bm*bm) );

 return exp(-(g2*log(Q2/Q12)/2)*log(b*b/bs2)/2 );

}


const  double BNLYf= 3.83462e-02;


double Sudakov3unpoee( double b , double z, double x )
{
  return exp(-BNLYf*b*b/(x*x)-BNLYf*b*b/(z*z));
}

double Sudakov3poee(double adterm , double b , double z, double x )
{
  return exp(-BNLYf*b*b/(x*x)+adterm*b*b/(x*x)-BNLYf*b*b/(z*z)+adterm*b*b/(z*z));
}


const double euq2=4.0/9;
const double edq2=1.0/9;
const double CB=0.3894E9;

double er(double stat, double syst  )
 {return sqrt(stat*stat+ syst*syst  );   }

const int da1dim1ee=10,da1dim2ee=6;

double  data1ee[da1dim1ee][da1dim2ee]=
  {0.0038   ,0.0204   ,0.0259  ,0.0414  , 0,  0,   
   0.0170   ,0.0265   ,0.0341  ,0.0630  , 0,  0,
   0.0262   ,0.0349   ,0.0412  ,0.1069  , 0,  0,
   0.0335   ,0.0524   ,0.0784  ,0.1525  , 0,  0,
   0.0111   ,0.0143   ,0.0134  ,0.0144  ,0.0176  ,0.0248  ,
   0.0124   ,0.0153   ,0.0183  ,0.0176  ,0.0232  ,0.0307  ,
   0.0127   ,0.0141   ,0.0226  ,0.0195  ,0.0274  ,0.0431  ,
   0.0103   ,0.0169   ,0.0204  ,0.0196  ,0.0274  ,0.0431  ,
   0.0162   ,0.0207   ,0.0285  ,0.0317  ,0.0457  ,0.0766  ,
   0.0237   ,0.0299   ,0.0400  ,0.0591  ,0.0726  ,0.1110
                     
                     };
double error1ee[da1dim1ee][da1dim2ee]=
  {er(0.0088,0.0026)   ,er(0.0047,0.0027)   ,er(0.0047,0.0029)  ,er(0.0056,0.0033)  ,0,0,
   er(0.0047,0.0027)   ,er(0.0042,0.0029)   ,er(0.0052,0.0031)  ,er(0.0068,0.0041)  ,0,0,
   er(0.0045,0.0029)   ,er(0.0048,0.0031)   ,er(0.0076,0.0033)  ,er(0.0129,0.0033)  ,0,0,
   er(0.0056,0.0031)   ,er(0.0078,0.0037)   ,er(0.0133,0.0047)  ,er(0.0382,0.0086)  ,0,0,
   er(0.0014,0.0005)   ,er(0.0012,0.0005)   ,er(0.0016,0.0006)  ,er(0.0017,0.0006)  ,er(0.0020,0.0007)  ,er(0.0012,0.0008),
   er(0.0012,0.0005)   ,er(0.0011,0.0006)   ,er(0.0017,0.0006)  ,er(0.0017,0.0006)  ,er(0.0019,0.0008)  ,er(0.0024,0.0008),
   er(0.0016,0.0006)   ,er(0.0016,0.0006)   ,er(0.0031,0.0012)  ,er(0.0029,0.0011)  ,er(0.0032,0.0018)  ,er(0.0035,0.0022),
   er(0.0017,0.0006)   ,er(0.0017,0.0006)   ,er(0.0029,0.0011)  ,er(0.0031,0.0011)  ,er(0.0034,0.0020)  ,er(0.0051,0.0024),
   er(0.0020,0.0010)   ,er(0.0019,0.0010)   ,er(0.0032,0.0019)  ,er(0.0034,0.0019)  ,er(0.0037,0.0025)  ,er(0.0062,0.0031),
   er(0.0026,0.0011)   ,er(0.0024,0.0011)   ,er(0.0035,0.0020)  ,er(0.0052,0.0024)  ,er(0.0061,0.0030)  ,er(0.0119,0.0039)
   
                     };
double   zd1ee[da1dim1ee][da1dim2ee]=
  {0.244    ,0.244    ,0.244   ,0.244   ,0, 0,
   0.377    ,0.377    ,0.378   ,0.379   ,0, 0,
   0.575    ,0.576    ,0.578   ,0.578   ,0, 0,
   0.778    ,0.779    ,0.781   ,0.783   ,0, 0,
   0.174    ,0.174    ,0.174   ,0.174   ,0.174   ,0.174,
   0.244    ,0.244    ,0.244   ,0.244   ,0.244   ,0.244,
   0.344    ,0.344    ,0.344   ,0.344   ,0.344   ,0.344,
   0.444    ,0.444    ,0.444   ,0.444   ,0.444   ,0.445,
   0.577    ,0.577    ,0.577   ,0.578   ,0.579   ,0.580,
   0.772    ,0.772    ,0.773   ,0.774   ,0.775   ,0.776
                           
                      };

double   xd1ee[da1dim1ee][da1dim2ee]=
  {0.244    ,0.377    ,0.575   ,0.779   ,0, 0,
   0.244    ,0.377    ,0.576   ,0.778   ,0, 0,
   0.244    ,0.378    ,0.576   ,0.780   ,0, 0,
   0.244    ,0.379    ,0.577   ,0.780   ,0, 0,
   0.174    ,0.244    ,0.344   ,0.444   ,0.577  ,0.772,
   0.174    ,0.244    ,0.344   ,0.444   ,0.577  ,0.772,
   0.174    ,0.244    ,0.344   ,0.444   ,0.577  ,0.772,
   0.174    ,0.244    ,0.344   ,0.444   ,0.578  ,0.774,
   0.174    ,0.244    ,0.344   ,0.444   ,0.579  ,0.775,
   0.174    ,0.244    ,0.344   ,0.445   ,0.580  ,0.776
                      };





//////////////////////////////////////////////////////////////////////////////////////////

const int da2dim1ee=10,da2dim2ee=6;

double  data2ee[da2dim1ee][da2dim2ee]=
  {0.0017   ,0.0091   ,0.0114  ,0.0169  ,0,0,
   0.0075   ,0.0115   ,0.0139  ,0.0232  ,0,0,
   0.0114   ,0.0144   ,0.0152  ,0.0346  ,0,0,
   0.0135   ,0.0196   ,0.0251  ,0.0339  ,0,0,
   0.0052   ,0.0066   ,0.0061  ,0.0065  ,0.0078  ,0.0105  ,
   0.0057   ,0.0070   ,0.0082  ,0.0077  ,0.0100  ,0.0125  , 
   0.0058   ,0.0063   ,0.0095  ,0.0080  ,0.0111  ,0.0166  ,
   0.0047   ,0.0074   ,0.0084  ,0.0078  ,0.0132  ,0.0177  ,
   0.0072   ,0.0090   ,0.0113  ,0.0123  ,0.0174  ,0.0270  ,
   0.0100   ,0.0122   ,0.0153  ,0.0216  ,0.0256  ,0.0352  
                     };
double error2ee[da2dim1ee][da2dim2ee]=
  {er(0.0041,0.0012)   ,er(0.0022,0.0013)   ,er(0.0022,0.0013)  ,er(0.0025,0.0015)  ,0,0,
   er(0.0022,0.0013)   ,er(0.0019,0.0013)   ,er(0.0023,0.0014)  ,er(0.0028,0.0018)  ,0,0,
   er(0.0020,0.0013)   ,er(0.0021,0.0014)   ,er(0.0030,0.0014)  ,er(0.0046,0.0021)  ,0,0,
   er(0.0025,0.0015)   ,er(0.0032,0.0016)   ,er(0.0048,0.0018)  ,er(0.0135,0.0022)  ,0,0,
   er(0.0011,0.0003)   ,er(0.0010,0.0003)   ,er(0.0014,0.0004)  ,er(0.0014,0.0004)  ,er(0.0017,0.0006)  ,er(0.0021,0.0006),
   er(0.0010,0.0003)   ,er(0.0009,0.0003)   ,er(0.0013,0.0004)  ,er(0.0013,0.0004)  ,er(0.0015,0.0006)  ,er(0.0019,0.0006),
   er(0.0014,0.0004)   ,er(0.0013,0.0004)   ,er(0.0019,0.0007)  ,er(0.0019,0.0007)  ,er(0.0022,0.0011)  ,er(0.0028,0.0012),
   er(0.0014,0.0004)   ,er(0.0013,0.0004)   ,er(0.0019,0.0007)  ,er(0.0022,0.0007)  ,er(0.0024,0.0011)  ,er(0.0039,0.0012),
   er(0.0017,0.0006)   ,er(0.0015,0.0006)   ,er(0.0022,0.0010)  ,er(0.0024,0.0011)  ,er(0.0028,0.0016)  ,er(0.0044,0.0017),
   er(0.0021,0.0006)   ,er(0.0019,0.0007)   ,er(0.0028,0.0011)   ,er(0.0040,0.0012)  ,er(0.0044,0.0017)  ,er(0.0083,0.0018)
                     };
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const int da3dim1ee=1,da3dim2ee=9;


double  data3ee[da3dim1ee][da3dim2ee]=
  {-0.0020   ,0.0034   ,0.0115  ,0.0167  ,0.0224    ,0.0202   ,0.0254   ,0.0220    ,0.0212  };

double error3ee[da3dim1ee][da3dim2ee]=
  {er(0.0028,0.0008)   ,er(0.0017,0.0006)   ,er(0.0014,0.0011)  ,er(0.0013,0.0011)  ,er(0.0015,0.0014)  ,er(0.0018,0.0014)  ,
   er(0.0021,0.0017)   ,er(0.0021,0.0017)   ,er(0.0020,0.0017)                    };

double   zd3ee[da3dim1ee][da3dim2ee]=
  {0.230    ,0.231  ,0.233   ,0.239   ,0.258   ,0.302    ,0.349  ,0.406  ,0.488                           
                      };

double   xd3ee[da3dim1ee][da3dim2ee]=
  {0.300    ,0.299    ,0.295   ,0.289   ,0.281  ,0.276   ,0.270  ,0.262  ,0.252   
                      };


double   pt3ee[da3dim1ee][da3dim2ee]=
  {0.083    ,0.194    ,0.315   ,0.438   ,0.558  ,0.683   ,0.818  ,0.989  ,1.258   
                      };

const int da4dim1ee=1,da4dim2ee=9;


double  data4ee[da4dim1ee][da4dim2ee]=
  {-0.0009   ,0.0015   ,0.0052  ,0.0076  ,0.0101    ,0.0091   ,0.0113   ,0.0096    ,0.0092  };

double error4ee[da4dim1ee][da4dim2ee]=
  {er(0.0023,0.0006)   ,er(0.0014,0.0004)   ,er(0.0012,0.0006)  ,er(0.0011,0.0006)  ,er(0.0012,0.0007)  ,er(0.0014,0.0007)  ,
   er(0.0016,0.0009)   ,er(0.0017,0.0009)   ,er(0.0016,0.0009)                    };

double   zd4ee[da4dim1ee][da4dim2ee]=
  {0.230    ,0.231  ,0.233   ,0.239   ,0.258   ,0.302    ,0.349  ,0.406  ,0.488                           
                      };

double   xd4ee[da4dim1ee][da4dim2ee]=
  {0.300    ,0.299    ,0.295   ,0.289   ,0.281  ,0.276   ,0.270  ,0.262  ,0.252   
                      };


double   pt4ee[da4dim1ee][da4dim2ee]=
  {0.083    ,0.194    ,0.315   ,0.438   ,0.558  ,0.683   ,0.818  ,0.989  ,1.258   
                      };





double phtit,ptit;
double BNLYit;
double Q2it;
double zit;
double xit;
double Nuit, Ndit, Npuit, Npdit ,Npubit  ,Npdbit    , auit, adit, apuit, apdit, apubit, apdbit   , buit, bdit, bpuit ,bpdit  , bpubit , bpdbit   ;

int hk;
int cn1, cn2;

#pragma omp threadprivate(zit)
#pragma omp threadprivate(xit)
#pragma omp threadprivate(ptit)


double unpopdf_favfav_disdis(double x1, double  x2 , double xi1a, double xi2a ,double b ,int fh     )
{ 

 double bm2=1.5;
 
 double bs2= b*b/(1+b*b/(bm2*bm2) )/C1/C1;



 double mu2=1.0/bs2;

 double xi1=(1-x1)*xi1a+x1;
 double xi2=(1-x2)*xi2a+x2;

 double z1=x1/xi1;
 double z2=x2/xi2;

 double pdfuf_ff=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffu(fh,1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffu(fh,1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffub(fh,-1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffub(fh,-1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,-1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;



  double pdfdf_ff=(1-x1)*(1-x2)*edq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffd(fh,-1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffd(fh,-1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,-1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffdb(fh,1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffdb(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;


double pdfuf_dd=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffu(fh,-1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffu(fh,-1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,-1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffub(fh,1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffub(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;



  double pdfdf_dd=(1-x1)*(1-x2)*edq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffd(fh,1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffd(fh,1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffdb(fh,-1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffdb(fh,-1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,-1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;


 return pdfuf_ff+pdfdf_ff+pdfuf_dd+pdfdf_dd;

}


double unpopdf_favdis_disfav(double x1, double  x2 , double xi1a, double xi2a ,double b ,int fh     )
{ 

 double bm2=1.5;

 double bs2= b*b/(1+b*b/(bm2*bm2) )/C1/C1;

 double mu2=1.0/bs2;

 double xi1=(1-x1)*xi1a+x1;
 double xi2=(1-x2)*xi2a+x2;

 double z1=x1/xi1;
 double z2=x2/xi2;

 double pdfuf_fd=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffu(fh,1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffu(fh,1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffub(fh,1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffub(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;



  double pdfdf_fd=(1-x1)*(1-x2)*edq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffd(fh,-1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffd(fh,-1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,-1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffdb(fh,-1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffdb(fh,-1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,-1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;


double pdfuf_df=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffu(fh,-1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffu(fh,-1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,-1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffub(fh,-1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffub(fh,-1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,-1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;



  double pdfdf_df=(1-x1)*(1-x2)*edq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffd(fh,1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffd(fh,1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffdb(fh,1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffdb(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
                                                                                           ) ;


 return pdfuf_fd+pdfdf_fd+pdfuf_df+pdfdf_df;

}

double unpopdf_nonfav_nondis(double x1, double  x2 , double xi1a, double xi2a ,double b ,int fh     )
{ 

  double bm2=1.5;

 double bs2= b*b/(1+b*b/(bm2*bm2) )/C1/C1;



 double mu2=1.0/bs2;

 double xi1=(1-x1)*xi1a+x1;
 double xi2=(1-x2)*xi2a+x2;

 double z1=x1/xi1;
 double z2=x2/xi2;

 double pdfuf=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffu(fh,1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffu(fh,1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   ) +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffu(fh,-1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffu(fh,-1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,-1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   )  )

 ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffub(fh,1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffub(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   ) +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffub(fh,-1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffub(fh,-1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,-1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
 )
                                                                                           ) ;



  double pdfdf=(1-x1)*(1-x2)*edq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffd(fh,-1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffd(fh,-1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +as(mu2)/pi*ffg(fh,-1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   ) +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffd(fh,1,x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*ffd(fh,1,xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
			                             +as(mu2)/pi*ffg(fh,1,xi1,mu2)/xi1 *(2.0/3.0*z1 +4.0/3.0*(1+(1-z1)*(1-z1))/z1*log(z1)   ) )

  ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffdb(fh,-1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffdb(fh,-1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,-1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   ) +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*ffdb(fh,1,x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffdb(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +as(mu2)/pi*ffg(fh,1,xi2,mu2)/xi2 *(2.0/3.0*z2 +4.0/3.0*(1+(1-z2)*(1-z2))/z2*log(z2)   )  )
 )
                                                                                           ) ;





 return pdfuf+pdfdf;

}









double ker1_fun_unpoee_favfav_disdis(double b,double Q2, double pt, double z ,double x, double xi1a ,double xi2a )
 {
     

   double crsunpo=(unpopdf_favfav_disdis(z, x ,xi1a,xi2a , b ,1 ))*(2*pi*pt)*(b/(2.0*pi))*(TMath::BesselJ0(pt*b))*
     Sudakov1(Q2,b)*Sudakov2(Q2,b)*Sudakov3unpoee(b,z,x);
 return crsunpo ;
} 


double ker1_fun_unpoee_favdis_disfav(double b,double Q2, double pt, double z ,double x, double xi1a ,double xi2a )
 {
     

   double crsunpo=(unpopdf_favdis_disfav(z, x ,xi1a,xi2a , b ,1 ))*(2*pi*pt)*(b/(2.0*pi))*(TMath::BesselJ0(pt*b))*
     Sudakov1(Q2,b)*Sudakov2(Q2,b)*Sudakov3unpoee(b,z,x);




 return crsunpo ;
} 

double ker1_fun_unpoee_nonfav_nondis(double b,double Q2, double pt, double z ,double x, double xi1a ,double xi2a )
 {
     

   double crsunpo=(unpopdf_nonfav_nondis(z, x ,xi1a,xi2a , b ,1 ))*(2*pi*pt)*(b/(2.0*pi))*(TMath::BesselJ0(pt*b))*
     Sudakov1(Q2,b)*Sudakov2(Q2,b)*Sudakov3unpoee(b,z,x);
 return crsunpo ;
} 



double ker2_fun_unpoee_favfav_disdis(const double * xi)
{
  return ker1_fun_unpoee_favfav_disdis(xi[0],Q2it,xi[1], zit , xit , xi[2] ,xi[3]  );
}

double ker2_fun_unpoee_favdis_disfav(const double * xi)
{
  return ker1_fun_unpoee_favdis_disfav(xi[0],Q2it,xi[1], zit , xit , xi[2] ,xi[3]  );
}

double ker2_fun_unpoee_nonfav_nondis(const double * xi)
{
  return ker1_fun_unpoee_nonfav_nondis(xi[0],Q2it,xi[1], zit , xit , xi[2] ,xi[3]  );
}


double ker2_fun_unpoee_pt_favfav_disdis(const  double *  xi)
{
  return ker1_fun_unpoee_favfav_disdis(xi[0],Q2it,ptit, zit , xit  , xi[1] ,xi[2]     );
}

double ker2_fun_unpoee_pt_favdis_disfav(const  double *  xi)
{
   return ker1_fun_unpoee_favdis_disfav(xi[0],Q2it,ptit, zit , xit , xi[1] ,xi[2]  );
}


double ker2_fun_unpoee_pt_nonfav_nondis(const  double *  xi)
{
  return ker1_fun_unpoee_nonfav_nondis(xi[0],Q2it,ptit, zit , xit  , xi[1] ,xi[2]     );
}



void  heralhc_init(const double & x,
                   const double & Q,
                   double * pdf) { 
  
  // Nuit=       1.00000e+01  ;
  // Ndit=      -1.53931e+00  ;
  // auit=       7.96969e+00  ;
  // adit=       1.43211e+00  ;
  // buit=       1.18983e+00  ;
  // bdit=       7.20196e-09  ;


 double  uv  =x* Nuit * pow(x,auit) * pow(1-x,buit)   * ffu (1,1 ,x,2.4) ;
 double  ub  =x* Ndit * pow(x,adit) * pow(1-x,bdit)   * ffu (1,-1 ,x,2.4) ;
 double  dv  =x* Ndit * pow(x,adit) * pow(1-x,bdit)   * ffd (1,1 ,x,2.4) ;
 double  db  =x* Nuit * pow(x,auit) * pow(1-x,buit)   * ffd (1,-1 ,x,2.4) ;


  pdf[ 0+6] = 0;
  pdf[-3+6] = 0;
  pdf[ 3+6] = 0;
  pdf[ 2+6] = uv;
  pdf[-2+6] = ub;
  pdf[ 1+6] = dv;
  pdf[-1+6] = db;

 

  pdf[ 4+6] = 0;
  pdf[ 5+6] = 0;
  pdf[ 6+6] = 0;
  pdf[-4+6] = 0;
  pdf[-5+6] = 0;
  pdf[-6+6] = 0;





}


double pof_u_pi(  double x,  double Q2  )
{
  double Q= sqrt(Q2);
  double pdf[13];
  hoppetEval(x, Q, pdf);
 return pdf[6+2];
 //  return ffu (1,1 ,x,Q2) ;

  }


double pof_ub_pi(  double x,  double Q2  )
{

  double Q= sqrt(Q2);
 double pdf[13];
  hoppetEval(x, Q, pdf);
 return pdf[6-2];
 //  return ffub (1,1 ,x,Q2);
 
}





double pof_u_mpi( double x,  double Q2  )
{

  double Q= sqrt(Q2);
 double pdf[13];
  hoppetEval(x, Q, pdf);
  return pdf[6-2];
  //   return ffu (1,-1 ,x,Q2);
  
}


double pof_ub_mpi(  double x,  double Q2  )
{
 double Q= sqrt(Q2);
 double pdf[13];
  hoppetEval(x, Q, pdf);
  return pdf[6+2];
  //  return ffub (1,-1 ,x,Q2);
  
}




double pof_d_pi(   double x,  double Q2  )
{
  double Q= sqrt(Q2);
double pdf[13];
  hoppetEval(x, Q, pdf);
    return pdf[6+1];
    //    return ffd (1,1 ,x,Q2);
  
}




double pof_db_pi(   double x,  double Q2  )
{
  double Q= sqrt(Q2);
 double pdf[13];
   hoppetEval(x, Q, pdf);
 return pdf[6-1];
 //  return ffdb (1,1 ,x,Q2);
  

}


double pof_d_mpi(   double x,  double Q2  )
{

  double Q= sqrt(Q2);
 double pdf[13];
   hoppetEval(x, Q, pdf);
  return pdf[6-1];
  //  return ffd (1,-1 ,x,Q2);
 

}



double pof_db_mpi(   double x,  double Q2  )
{

  double Q= sqrt(Q2);
 double pdf[13];
   hoppetEval(x, Q, pdf);
    return pdf[6+1];
    //  return ffdb (1,-1 ,x,Q2);
   
}



double popdf_favfav_disdis(double x1, double  x2 , double xi1a, double xi2a ,double b ,int fh     )
{ 

  double bm2=1.5;
 
 double bs2= b*b/(1+b*b/(bm2*bm2) )/C1/C1;



 double mu2=1.0/bs2;

 double xi1=(1-x1)*xi1a+x1;
 double xi2=(1-x2)*xi2a+x2;

 double z1=x1/xi1;
 double z2=x2/xi2;

 double pdfuf_ff=(1-x1)*(1-x2)*euq2*(
				     ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_u_pi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_u_pi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
				     ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_ub_mpi(x2,mu2)/(1-x2) 
				                     +as(mu2)/pi*pof_ub_mpi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;



  double pdfdf_ff=(1-x1)*(1-x2)*edq2*(
				      ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_d_mpi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_d_mpi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
				      ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_db_pi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_db_pi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;


double pdfuf_dd=(1-x1)*(1-x2)*euq2*(
				     ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_u_mpi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_u_mpi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
				     ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_ub_pi(x2,mu2)/(1-x2) 
				                     +as(mu2)/pi*pof_ub_pi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;




  double pdfdf_dd=(1-x1)*(1-x2)*edq2*(
				      ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_d_pi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_d_pi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
				      ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_db_mpi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_db_mpi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;





 return pdfuf_ff+pdfdf_ff+pdfuf_dd+pdfdf_dd;

}


double popdf_favdis_disfav(double x1, double  x2 , double xi1a, double xi2a ,double b ,int fh     )
{ 

 double bm2=1.5;

 double bs2= b*b/(1+b*b/(bm2*bm2) )/C1/C1;



 double mu2=1.0/bs2;

 double xi1=(1-x1)*xi1a+x1;
 double xi2=(1-x2)*xi2a+x2;

 double z1=x1/xi1;
 double z2=x2/xi2;

 double pdfuf_fd=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_u_pi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_u_pi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_ub_pi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_ub_pi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;



  double pdfdf_fd=(1-x1)*(1-x2)*edq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_d_mpi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_d_mpi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_db_mpi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_db_mpi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;


double pdfuf_df=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_u_mpi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_u_mpi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_ub_mpi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_ub_mpi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;




  double pdfdf_df=(1-x1)*(1-x2)*edq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_d_pi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_d_pi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                      ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_db_pi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_db_pi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
                                                                                           ) ;



 return pdfuf_fd+pdfdf_fd+pdfuf_df+pdfdf_df;

}

double popdf_nonfav_nondis(double x1, double  x2 , double xi1a, double xi2a ,double b ,int fh     )
{ 

 double bm2=1.5;

 double bs2= b*b/(1+b*b/(bm2*bm2) )/C1/C1;



 double mu2=1.0/bs2;

 double xi1=(1-x1)*xi1a+x1;
 double xi2=(1-x2)*xi2a+x2;

 double z1=x1/xi1;
 double z2=x2/xi2;

 double pdfuf=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_u_pi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_u_pi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_u_mpi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_u_mpi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                    )

 ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_ub_pi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffub(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_ub_mpi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_ub_mpi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
 )
                                                                                           ) ;



  double pdfdf=(1-x1)*(1-x2)*euq2*(
			  ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_d_pi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_d_pi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                     +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_d_mpi(x1,mu2)/(1-x1) 
                                                     +as(mu2)/pi*pof_d_mpi(xi1,mu2)/(xi1)*(2.0/3.0*(1-z1)+4.0/3.0*(1+z1*z1)/(1-z1)*log(z1))
                                                    )

 ) *
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_db_pi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*ffdb(fh,1,xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                     +
                          ((1+as(mu2)/pi/3.0*(pi*pi-8.0 ) )*pof_db_mpi(x2,mu2)/(1-x2) 
                                                     +as(mu2)/pi*pof_db_mpi(xi2,mu2)/(xi2)*(2.0/3.0*(1-z2)+4.0/3.0*(1+z2*z2)/(1-z2)*log(z2))
		                                      )
 )
                                                                                           ) ;





 return pdfuf+pdfdf;

}


double ker1_fun_po1ee_favfav_disdis(double b,double Q2, double pt , double z , double x  ,double BNLY  ,  double  xi1a, double   xi2a   )
{
 double crspo=(2*pi*pt)*(b*b/4.0)*(b/(2.0*pi))*(gsl_sf_bessel_Jnu(2,pt*b))*
   Sudakov1(Q2,b)*Sudakov2(Q2,b)*Sudakov3poee(BNLY,b,z,x)*popdf_favfav_disdis(z,x ,  xi1a,  xi2a , b ,1     );
 return crspo ;
} 

double ker1_fun_po1ee_favdis_disfav(double b,double Q2, double pt , double z , double x  ,double BNLY  ,  double  xi1a, double   xi2a   )
{
 double crspo=(2*pi*pt)*(b*b/4.0)*(b/(2.0*pi))*(gsl_sf_bessel_Jnu(2,pt*b))*
   Sudakov1(Q2,b)*Sudakov2(Q2,b)*Sudakov3poee(BNLY,b,z,x)*popdf_favdis_disfav(z,x ,  xi1a,  xi2a , b ,1     );
 return crspo ;
} 

double ker1_fun_po1ee_nonfav_nondis(double b,double Q2, double pt , double z , double x  ,double BNLY  ,  double  xi1a, double   xi2a   )
{
 double crspo=(2*pi*pt)*(b*b/4.0)*(b/(2.0*pi))*(gsl_sf_bessel_Jnu(2,pt*b))*
   Sudakov1(Q2,b)*Sudakov2(Q2,b)*Sudakov3poee(BNLY,b,z,x)*popdf_nonfav_nondis(z,x ,  xi1a,  xi2a , b ,1     );
 return crspo ;
} 



double ker2_fun_poee_favfav_disdis(const double * xi)
{
  return ker1_fun_po1ee_favfav_disdis(xi[0],Q2it,xi[1], zit , xit , BNLYit  ,xi[2] ,xi[3]   );
}


double ker2_fun_poee_favdis_disfav(const double * xi)
{
  return ker1_fun_po1ee_favdis_disfav(xi[0],Q2it,xi[1], zit , xit , BNLYit  ,xi[2] ,xi[3]   );
}


double ker2_fun_poee_nonfav_nondis(const double * xi)
{
  return ker1_fun_po1ee_nonfav_nondis(xi[0],Q2it,xi[1], zit , xit , BNLYit  ,xi[2] ,xi[3]   );
}

double ker2_fun_poee_pt_favfav_disdis( const  double * xi)
{
  return ker1_fun_po1ee_favfav_disdis(xi[0],Q2it,ptit, zit , xit , BNLYit    ,xi[1] ,xi[2]  );
}

double ker2_fun_poee_pt_favdis_disfav( const  double * xi)
{
  return ker1_fun_po1ee_favdis_disfav(xi[0],Q2it,ptit, zit , xit , BNLYit    ,xi[1] ,xi[2]  );
}

double ker2_fun_poee_pt_nonfav_nondis( const  double * xi)
{
  return ker1_fun_po1ee_nonfav_nondis(xi[0],Q2it,ptit, zit , xit , BNLYit    ,xi[1] ,xi[2]  );
}


  double y_x1ee[4][da1dim1ee][da1dim2ee][n];
  double y_x2ee[4][da1dim1ee][da1dim2ee][n];
  double y_x3ee[4][da1dim1ee][da1dim2ee][n];

// double pdfunpo1(int f ,int c1 , int c2  ,double x ,double z ){

//  double mu2=C1*C1/bm/bm;

//    double pfufunpo=euq2*(ffub(f,c1,x,mu2)*ffu(f,c2,z,mu2)+ffub(f,-c1,x,mu2)*ffu(f,-c2,z,mu2));
                    
//    double pfdfunpo=edq2*(ffdb(f,c1,x,mu2)*ffd(f,c2,z,mu2)+ffdb(f,-c1,x,mu2)*ffd(f,-c2,z,mu2)
// 			 //        +ffsb(f,c1,x,mu2)*ffs(f,c2,z,mu2)+ffsb(f,-c1,x,mu2)*ffs(f,-c2,z,mu2)
//                                                  );

//    return pfufunpo+pfdfunpo;
// }

// double pdfunpo2(int f ,int c1 , int c2  ,double x ,double z ){

//  double mu2=C1*C1/bm/bm;

//  double pfufunpo=euq2*(ffub(f,c1,x,mu2)+ffub(f,-c1,x,mu2))*(ffu(f,c2,z,mu2)+ffu(f,-c2,z,mu2));
                    
//    double pfdfunpo=edq2*(ffdb(f,c1,x,mu2)+ffdb(f,-c1,x,mu2))*(ffd(f,c2,z,mu2)+ffd(f,-c2,z,mu2)
// 	      //    +ffsb(f,c1,x,mu2)+ffsb(f,-c1,x,mu2))*(ffs(f,c2,z,mu2)+ffs(f,-c2,z,mu2)
//                        );

//    return pfufunpo+pfdfunpo;
// }


// void ker_inter1ee(int numj , int numi   ,  double Q2    , double zi[][da1dim2ee] ,double  vali[][da1dim2ee], int  fa    ) 
// {
 
//   Q2it=Q2;

//   double a[4] = {0   ,0   ,0   ,0 };

//   double b[4] = {100 ,3.5 ,1   ,1 };
 

//  double a2[2] = {0  ,0 };

//  double b2[2] = {100 ,3.5 };
 

//  ROOT::Math::Functor wfunpo_favfav_disdis(&ker2_fun_unpoee_favfav_disdis,4);  
//  ROOT::Math::Functor wfunpo_favdis_disfav(&ker2_fun_unpoee_favdis_disfav,4);
//  ROOT::Math::Functor wfpo(&ker2_fun_po1ee,2);

//  ROOT::Math::IntegratorMultiDim igunpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE);
//  ROOT::Math::IntegratorMultiDim igunpo_favdis_disfav(ROOT::Math::IntegrationMultiDim::kADAPTIVE);
//  ROOT::Math::IntegratorMultiDim igpo(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 

//  igunpo_favfav_disdis.SetFunction(wfunpo_favfav_disdis);
//  igunpo_favdis_disfav.SetFunction(wfunpo_favdis_disfav);
//    igpo.SetFunction(wfpo);


//  for(int j=0 ; j<numj ; ++j )
// {
 
//  for(int i=0 ; i<numi ; ++i )
//  { 
//    if (vali[j][i] < 0.0001 ) break;
     
//           zit=zi[j][i];
//         xit=vali[j][i];

//    for(int l=0 ; l<n ; ++l)
//      { 
//        BNLYit=x1[l];  



//  double valunpo1_favfav_disdis = igunpo_favfav_disdis.Integral(a,b);
//  double valunpo1_favdis_disfav = igunpo_favdis_disfav.Integral(a,b);
//  double valpo1   =   igpo.Integral(a2,b2);



//  // double valunpo2 = igunpo.Integral(a,b);
//  // double valpo2   =   igpo.Integral(a,b);


  
  
//  y_x1ee[fa][j][i][l] = valpo1/(valunpo1*(pdfunpo1(1,1,-1,xit,zit))) ;
//  y_x2ee[fa][j][i][l] = valpo1/(valunpo1*(pdfunpo1(1,1,1,xit,zit))) ;
//  y_x3ee[fa][j][i][l] = valpo1/(valunpo1*(pdfunpo2(1,1,1,xit,zit))) ;

//  cout<<1<<j<<i<<","<< y_x1ee[fa][j][i][l]<<","<< y_x2ee[fa][j][i][l]<<","<<y_x3ee[fa][j][i][l]<<endl;
//      }}}}


double resee[100][18][50];
double unpo_UL[20][20][2];
double unpo_UC[20][20][2];
double unpo_UL_pt[20][20][2];
double unpo_UC_pt[20][20][2];

void unpo_UL_r ( int  numj ,int numi  ,double Q2in  ,  double zi[][da1dim2ee] ,double vali[][da1dim2ee]) 
{ 
  Q2it=Q2in;

fraginid_.FINI=0;



 double a[4] = {0.0   ,0   ,0   ,0 };

  double b[4] = {100.0 ,3.5 ,1   ,1 };
 


ROOT::Math::Functor wfunpo_favfav_disdis(&ker2_fun_unpoee_favfav_disdis,4);  
ROOT::Math::Functor wfunpo_favdis_disfav(&ker2_fun_unpoee_favdis_disfav,4);


ROOT::Math::IntegratorMultiDim igunpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE);
ROOT::Math::IntegratorMultiDim igunpo_favdis_disfav(ROOT::Math::IntegrationMultiDim::kADAPTIVE);


igunpo_favfav_disdis.SetFunction(wfunpo_favfav_disdis);
igunpo_favdis_disfav.SetFunction(wfunpo_favdis_disfav);


// #pragma omp parallel for

 for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 
   if (vali[j][i] < 0.000001 ) break;
   //   if (Q2i[j][i] <1.5    ) continue;

          zit=zi[j][i];
        xit=vali[j][i];

double valunpo1_favfav_disdis = igunpo_favfav_disdis.Integral(a,b);
double valunpo1_favdis_disfav = igunpo_favdis_disfav.Integral(a,b);


unpo_UL[j][i][0]=valunpo1_favfav_disdis;
unpo_UL[j][i][1]=valunpo1_favdis_disfav;

}  
}
}

void unpo_UC_r ( int  numj ,int numi , double Q2in  ,   double zi[][da1dim2ee] ,double vali[][da1dim2ee]) 
{ 
 Q2it=Q2in; 

fraginid_.FINI=0;
 


 double a[4] =  {0.0   ,0   ,0   ,0 };

  double b[4] = {100 ,3.5 ,1   ,1 };
 

 


ROOT::Math::Functor wfunpo_favfav_disdis(&ker2_fun_unpoee_favfav_disdis,4);  
ROOT::Math::Functor wfunpo_nonfav_nondis(&ker2_fun_unpoee_nonfav_nondis,4);

 ROOT::Math::IntegratorMultiDim igunpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 
 ROOT::Math::IntegratorMultiDim igunpo_nonfav_nondis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 
 
igunpo_favfav_disdis.SetFunction(wfunpo_favfav_disdis);
igunpo_nonfav_nondis.SetFunction(wfunpo_nonfav_nondis);



// #pragma omp parallel for
 for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 
   if (vali[j][i] < 0.000001 ) break;
   //   if (Q2i[j][i] <1.5    ) continue;

          zit=zi[j][i];
        xit=vali[j][i];

double valunpo1_favfav_disdis = igunpo_favfav_disdis.Integral(a,b);
double valunpo1_nonfav_nondis = igunpo_nonfav_nondis.Integral(a,b);

unpo_UC[j][i][0]=valunpo1_favfav_disdis;
unpo_UC[j][i][1]=valunpo1_nonfav_nondis;
   
}  
}
}

void unpo_UL_pt_r( int  numj ,int numi , double Q2in , double zi[][da3dim2ee] ,  double vali[][da3dim2ee], double pti[][da3dim2ee]) 
{ 

  Q2it=Q2in;
 
double chiv=0;
 
double a[3] = {0       ,0   ,0 };

 double b[3] = {100     ,1   ,1 };
 


 ROOT::Math::Functor wfunpo_favfav_disdis(&ker2_fun_unpoee_pt_favfav_disdis,3);  
 ROOT::Math::Functor wfunpo_favdis_disfav(&ker2_fun_unpoee_pt_favdis_disfav,3);


ROOT::Math::IntegratorMultiDim igunpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE);
ROOT::Math::IntegratorMultiDim igunpo_favdis_disfav(ROOT::Math::IntegrationMultiDim::kADAPTIVE);


igunpo_favfav_disdis.SetFunction(wfunpo_favfav_disdis);
igunpo_favdis_disfav.SetFunction(wfunpo_favdis_disfav);




// #pragma omp parallel for
 for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 
   if (vali[j][i] < 0.000001 ) break;
   //   if (Q2i[j][i] <1.5    ) continue;

          zit=zi[j][i];
        xit=vali[j][i];   
     ptit= pti[j][i]/zi[j][i];

   
double valunpo1_favfav_disdis = igunpo_favfav_disdis.Integral(a,b);
double valunpo1_favdis_disfav = igunpo_favdis_disfav.Integral(a,b);

unpo_UL_pt[j][i][0]=valunpo1_favfav_disdis;
unpo_UL_pt[j][i][1]=valunpo1_favdis_disfav;


}
}
} 


void unpo_UC_pt_r ( int  numj ,int numi  , double Q2in  ,  double zi[][da4dim2ee] ,   double vali[][da4dim2ee]   ,double pti[][da4dim2ee]) 
{ 

  Q2it=Q2in; 


double a[3] = {0   ,0   ,0 };

 double b[3] = {100  ,1   ,1 };




ROOT::Math::Functor wfunpo_favfav_disdis(&ker2_fun_unpoee_pt_favfav_disdis,3);  
ROOT::Math::Functor wfunpo_nonfav_nondis(&ker2_fun_unpoee_pt_nonfav_nondis,3);


 ROOT::Math::IntegratorMultiDim igunpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 
 ROOT::Math::IntegratorMultiDim igunpo_nonfav_nondis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 
 

igunpo_favfav_disdis.SetFunction(wfunpo_favfav_disdis);
igunpo_nonfav_nondis.SetFunction(wfunpo_nonfav_nondis);


//  #pragma omp parallel for
   for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 
    if (vali[j][i] < 0.000001 ) break;
   //   if (Q2i[j][i] <1.5    ) continue;

          zit=zi[j][i];
        xit=vali[j][i];   
       ptit= pti[j][i]/zi[j][i];

double valunpo1_favfav_disdis = igunpo_favfav_disdis.Integral(a,b);
double valunpo1_nonfav_nondis = igunpo_nonfav_nondis.Integral(a,b);

unpo_UC_pt[j][i][0]=valunpo1_favfav_disdis;
unpo_UC_pt[j][i][1]=valunpo1_nonfav_nondis;
 

}
}
}




/////////////////////////////////////////////////////////////////

double chis1ee_UL (double* fit , int  numj ,int numi ,int fa ,double Q2in  ,  double zi[][da1dim2ee] ,
double vali[][da1dim2ee],double data[][da1dim2ee],double error[][da1dim2ee], int nu) 
{ 
  Q2it=Q2in;

fraginid_.FINI=0;



 double a[4] = {0.0   ,0   ,0   ,0 };

  double b[4] = {100.0 ,3.5 ,1   ,1 };
 

 

double chiv=0;


 BNLYit=fit[0];
 Nuit=fit[1];
 Ndit=fit[2];
 auit=fit[3];
 adit=fit[4];
 buit=fit[5];
 bdit=fit[6];



double   ymax  = 12.;        //      ! max value of ln 1/x
 double   dy    = 0.1;        //     ! the internal grid spacing (smaller->higher accuarcy)
                                // ! 0.1 should provide at least 10^{-3} accuracy 
 double   Qmin  = 1.;  //   ! smallest Q value in tabulation
 double   Qmax  = 1e+4;       // ! largest Q value in tabulation
 double   dlnlnQ = dy/4.;     // ! tabulation spacing in dlnlnQ (dy/4 recommended)
 int   nloop  = 1;            // ! the number of loops to initialise (max=3!)
 int   order  = -6;           // ! numerical interpolation order (-6 is a good choice)

 int   scheme = 5;            // ! 1=unpol-MSbar, 2=unpol-DIS, 3=Pol-MSbar, 
                                // ! 4=frag, 5=TransMsbar

hoppetStartExtended(ymax,dy,Qmin,Qmax,dlnlnQ,nloop,order, scheme);


 double asQ0 = 0.35, Q0=sqrt(2.4);


  hoppetEvolve(asQ0, Q0, nloop, 1.0, heralhc_init, Q0);  


ROOT::Math::Functor wfpo_favfav_disdis(&ker2_fun_poee_favfav_disdis,4);  
ROOT::Math::Functor wfpo_favdis_disfav(&ker2_fun_poee_favdis_disfav,4);


ROOT::Math::IntegratorMultiDim igpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE);
ROOT::Math::IntegratorMultiDim igpo_favdis_disfav(ROOT::Math::IntegrationMultiDim::kADAPTIVE);



igpo_favfav_disdis.SetFunction(wfpo_favfav_disdis);
igpo_favdis_disfav.SetFunction(wfpo_favdis_disfav);


 double chiv_g[numj][numi];

#pragma omp parallel for
 // private(zit,xit)

 for(int i=0 ; i<numi ; ++i )
{
 for(int j=0 ; j<numj ; ++j )
{ 
   if (vali[j][i] < 0.000001 )
     {   continue; }
   //   if (Q2i[j][i] <1.5    ) continue;

          zit=zi[j][i];
        xit=vali[j][i];


double valunpo1_favfav_disdis = unpo_UL[j][i][0];
double valunpo1_favdis_disfav = unpo_UL[j][i][1];
double valpo1_favfav_disdis = igpo_favfav_disdis.Integral(a,b);
double valpo1_favdis_disfav = igpo_favdis_disfav.Integral(a,b);

 
double  val1=valpo1_favfav_disdis/valunpo1_favfav_disdis;

double  val2=valpo1_favdis_disfav/valunpo1_favdis_disfav;


   
double val=0.7*(val1-val2)/(zit*xit) ;



resee[nu][j][i]=val;
//  cout<<val<<endl;
 
chiv_g[j][i]=(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i]);


//   //  cout<<"data="<<data[j][i]<<endl;
//   cout<<"val= " <<val<<endl;  
  // cout<<"Chi^2="<<(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i])<<endl;
} 
 // cout<<chiv<<endl;
}


 for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 

  chiv+=chiv_g[j][i];

 }}

//cout<<"TChi^2="<<chiv<<endl;
return chiv;

}

double chis2ee_UC (double* fit , int  numj ,int numi ,int fa , double Q2in  ,   double zi[][da1dim2ee] ,
double vali[][da1dim2ee],double data[][da1dim2ee],double error[][da1dim2ee], int nu) 
{ 
 Q2it=Q2in; 

fraginid_.FINI=0;
 
double chiv=0;

 double a[4] =  {0.0   ,0   ,0   ,0 };

  double b[4] = {100 ,3.5 ,1   ,1 };
 

 


 BNLYit=fit[0];
 Nuit=fit[1];
 Ndit=fit[2];
 auit=fit[3];
 adit=fit[4];
 buit=fit[5];
 bdit=fit[6];


double   ymax  = 12.;        //      ! max value of ln 1/x
 double   dy    = 0.1;        //     ! the internal grid spacing (smaller->higher accuarcy)
                                // ! 0.1 should provide at least 10^{-3} accuracy 
 double   Qmin  = 1.;  //   ! smallest Q value in tabulation
 double   Qmax  = 1e+4;       // ! largest Q value in tabulation
 double   dlnlnQ = dy/4.;     // ! tabulation spacing in dlnlnQ (dy/4 recommended)
 int   nloop  = 1;            // ! the number of loops to initialise (max=3!)
 int   order  = -6;           // ! numerical interpolation order (-6 is a good choice)

 int   scheme = 5;            // ! 1=unpol-MSbar, 2=unpol-DIS, 3=Pol-MSbar, 
                                // ! 4=frag, 5=TransMsbar

hoppetStartExtended(ymax,dy,Qmin,Qmax,dlnlnQ,nloop,order,
                              scheme);


 double asQ0 = 0.35, Q0=sqrt(2.4);


  hoppetEvolve(asQ0, Q0, nloop, 1.0, heralhc_init, Q0);  


ROOT::Math::Functor wfpo_favfav_disdis(&ker2_fun_poee_favfav_disdis,4);  
ROOT::Math::Functor wfpo_nonfav_nondis(&ker2_fun_poee_nonfav_nondis,4);


 ROOT::Math::IntegratorMultiDim igpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 
 ROOT::Math::IntegratorMultiDim igpo_nonfav_nondis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 


igpo_favfav_disdis.SetFunction(wfpo_favfav_disdis);
igpo_nonfav_nondis.SetFunction(wfpo_nonfav_nondis);

 double chiv_g[numj][numi];


#pragma omp parallel for
 // private(zit,xit)

 for(int i=0 ; i<numi ; ++i )
{
 for(int j=0 ; j<numj ; ++j )
{ 
   if (vali[j][i] < 0.000001 )
 {  continue;}
   //   if (Q2i[j][i] <1.5    ) continue;

          zit=zi[j][i];
        xit=vali[j][i];

double valunpo1_favfav_disdis = unpo_UC[j][i][0];
double valunpo1_nonfav_nondis = unpo_UC[j][i][1];
double valpo1_favfav_disdis = igpo_favfav_disdis.Integral(a,b);
double valpo1_nonfav_nondis = igpo_nonfav_nondis.Integral(a,b);

 

 

 double  val1=valpo1_favfav_disdis/valunpo1_favfav_disdis;

 double  val2=valpo1_nonfav_nondis/valunpo1_nonfav_nondis;
   
 double val=0.7*(val1-val2)/(zit*xit) ;



 resee[nu][j][i]=val;
 //  cout<<val<<endl;
 
  chiv_g[j][i]=(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i]);


 // cout<<"data="<<data[j][i]<<endl;
 //  cout<<"val= " <<val<<endl;  
 //  cout<<"Chi^2="<<(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i])<<endl;

  //    cout<<nu<<j<<i<<","<<(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i])<<endl;
} 
 // cout<<chiv<<endl;
}


 for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 

  chiv+=chiv_g[j][i];

 }}



//cout<<"TChi^2="<<chiv<<endl;
return chiv;
}

double chis3ee_pt0_UL(double* fit , int  numj ,int numi ,int fa   , double Q2in , double zi[][da3dim2ee] ,
		   double vali[][da3dim2ee],double data[][da3dim2ee],double error[][da3dim2ee] ,double pti[][da3dim2ee], int nu) 
{ 

  Q2it=Q2in;
 
double chiv=0;

 // double a[4] = {0   ,0    ,0   ,0 };

 // double b[4] = {100 ,3.5    ,1   ,1 };
 
double a[3] = {0       ,0   ,0 };

 double b[3] = {100     ,1   ,1 };
 


 BNLYit=fit[0];
 Nuit=fit[1];
 Ndit=fit[2];
 auit=fit[3];
 adit=fit[4];
 buit=fit[5];
 bdit=fit[6];


double   ymax  = 12.;        //      ! max value of ln 1/x
 double   dy    = 0.1;        //     ! the internal grid spacing (smaller->higher accuarcy)
                                // ! 0.1 should provide at least 10^{-3} accuracy 
 double   Qmin  = 1.;  //   ! smallest Q value in tabulation
 double   Qmax  = 1e+4;       // ! largest Q value in tabulation
 double   dlnlnQ = dy/4.;     // ! tabulation spacing in dlnlnQ (dy/4 recommended)
 int   nloop  = 1;            // ! the number of loops to initialise (max=3!)
 int   order  = -6;           // ! numerical interpolation order (-6 is a good choice)

 int   scheme = 5;            // ! 1=unpol-MSbar, 2=unpol-DIS, 3=Pol-MSbar, 
                                // ! 4=frag, 5=TransMsbar

hoppetStartExtended(ymax,dy,Qmin,Qmax,dlnlnQ,nloop,order,
                              scheme);


 double asQ0 = 0.35, Q0=sqrt(2.4);


  hoppetEvolve(asQ0, Q0, nloop, 1.0, heralhc_init, Q0);  

ROOT::Math::Functor wfpo_favfav_disdis(&ker2_fun_poee_pt_favfav_disdis,3);  
ROOT::Math::Functor wfpo_favdis_disfav(&ker2_fun_poee_pt_favdis_disfav,3);

ROOT::Math::IntegratorMultiDim igpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE);
ROOT::Math::IntegratorMultiDim igpo_favdis_disfav(ROOT::Math::IntegrationMultiDim::kADAPTIVE);

igpo_favfav_disdis.SetFunction(wfpo_favfav_disdis);
igpo_favdis_disfav.SetFunction(wfpo_favdis_disfav); 

 double chiv_g[numj][numi];

   #pragma omp parallel for
 // private(zit,xit,ptit )

 for(int i=0 ; i<numi ; ++i )
{
 for(int j=0 ; j<numj ; ++j )
{ 
   if (vali[j][i] < 0.000001 )
   {  continue; }

   //   if (Q2i[j][i] <1.5    ) continue;

    
           zit=zi[j][i];
        xit=vali[j][i];   
       ptit= pti[j][i]/zi[j][i];
   
 double valunpo1_favfav_disdis =unpo_UL_pt[j][i][0];
 double valunpo1_favdis_disfav =unpo_UL_pt[j][i][1];
 double valpo1_favfav_disdis = igpo_favfav_disdis.Integral(a,b);
 double valpo1_favdis_disfav = igpo_favdis_disfav.Integral(a,b);


//  cout<<zit<<","<<xit<<","<<ptit<<","<<j<<","<<i<<","
// <<valunpo1_favfav_disdis<<","<<valunpo1_favdis_disfav<<","<<valpo1_favfav_disdis<<","<< valpo1_favdis_disfav<<endl;

 
double  val1=valpo1_favfav_disdis/valunpo1_favfav_disdis;

double  val2=valpo1_favdis_disfav/valunpo1_favdis_disfav;
   
double val=0.7*(val1-val2)/(zit*xit) ;


  chiv_g[j][i]=(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i]);
  //    cout<<nu<<j<<i<<","<<(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i])<<endl;

 resee[nu][j][i]=val;
 // cout<<val<<endl;
 
 // cout<<"data="<<data[j][i]<<endl;
 //  cout<<"val= " <<val<<endl;  
 //  cout<<"Chi^2="<<(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i])<<endl;

 }

 }
//cout<<"TChi^2="<<chiv<<endl;

 for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 

  chiv+=chiv_g[j][i];

 }}


return chiv;
} 


double chis4ee_pt0_UC (double* fit , int  numj ,int numi ,int fa , double Q2in  ,  double zi[][da4dim2ee] ,
		    double vali[][da4dim2ee],double data[][da4dim2ee],double error[][da4dim2ee], double pti[][da4dim2ee], int nu) 
{ 

  Q2it=Q2in; 

double chiv=0;


double a[3] = {0   ,0   ,0 };

 double b[3] = {100  ,1   ,1 };

 BNLYit=fit[0];
 Nuit=fit[1];
 Ndit=fit[2];
 auit=fit[3];
 adit=fit[4];
 buit=fit[5];
 bdit=fit[6];

double   ymax  = 12.;        //      ! max value of ln 1/x
 double   dy    = 0.1;        //     ! the internal grid spacing (smaller->higher accuarcy)
                                // ! 0.1 should provide at least 10^{-3} accuracy 
 double   Qmin  = 1.;  //   ! smallest Q value in tabulation
 double   Qmax  = 1e+4;       // ! largest Q value in tabulation
 double   dlnlnQ = dy/4.;     // ! tabulation spacing in dlnlnQ (dy/4 recommended)
 int   nloop  = 1;            // ! the number of loops to initialise (max=3!)
 int   order  = -6;           // ! numerical interpolation order (-6 is a good choice)

 int   scheme = 5;            // ! 1=unpol-MSbar, 2=unpol-DIS, 3=Pol-MSbar, 
                                // ! 4=frag, 5=TransMsbar

hoppetStartExtended(ymax,dy,Qmin,Qmax,dlnlnQ,nloop,order,
                              scheme);


 double asQ0 = 0.35, Q0=sqrt(2.4);


  hoppetEvolve(asQ0, Q0, nloop, 1.0, heralhc_init, Q0);  


ROOT::Math::Functor wfpo_favfav_disdis(&ker2_fun_poee_pt_favfav_disdis,3);  
ROOT::Math::Functor wfpo_nonfav_nondis(&ker2_fun_poee_pt_nonfav_nondis,3);


 ROOT::Math::IntegratorMultiDim igpo_favfav_disdis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 
 ROOT::Math::IntegratorMultiDim igpo_nonfav_nondis(ROOT::Math::IntegrationMultiDim::kADAPTIVE); 


igpo_favfav_disdis.SetFunction(wfpo_favfav_disdis);
igpo_nonfav_nondis.SetFunction(wfpo_nonfav_nondis);

 double chiv_g[numj][numi];

 #pragma omp parallel for 
 // private(zit,xit,ptit )

   for(int i=0 ; i<numi ; ++i )
{
 for(int j=0 ; j<numj ; ++j )
{ 
    if (vali[j][i] < 0.000001 )
    { continue;      }

   //   if (Q2i[j][i] <1.5    ) continue;

          zit=zi[j][i];
        xit=vali[j][i];   
       ptit= pti[j][i]/zi[j][i];

double valunpo1_favfav_disdis =unpo_UC_pt[j][i][0];
double valunpo1_nonfav_nondis =unpo_UC_pt[j][i][1];
double valpo1_favfav_disdis = igpo_favfav_disdis.Integral(a,b);
double valpo1_nonfav_nondis = igpo_nonfav_nondis.Integral(a,b);
 

 double  val1=valpo1_favfav_disdis/valunpo1_favfav_disdis;

 double  val2=valpo1_nonfav_nondis/valunpo1_nonfav_nondis;
   
 double val=0.7*(val1-val2)/(zit*xit) ;


 chiv_g[j][i]=(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i]);

 resee[nu][j][i]=val;

 // cout<<j<<","<<i<<","<<valunpo1_favfav_disdis<<","<<valunpo1_nonfav_nondis<<","<<valpo1_favfav_disdis<<","<< valpo1_nonfav_nondis<<endl;

 // cout<<val<<endl;

 // cout<<"data="<<data[j][i]<<endl;
 //  cout<<"val= " <<val<<endl;  
 //  cout<<"Chi^2="<<(val-data[j][i])*(val-data[j][i])/(error[j][i]*error[j][i])<<endl;

 }

 }


 for(int j=0 ; j<numj ; ++j )
{
 for(int i=0 ; i<numi ; ++i )
{ 

  chiv+=chiv_g[j][i];

 }}

//cout<<"TChi^2="<<chiv<<endl;

return chiv;
} 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void fcn(Int_t &npr, Double_t *gin, Double_t &f,  Double_t *par, Int_t iflag  )
{
time_t tstart, tend;
tstart = time(0);

  double  Lpar[19]; 

  f= 
    chis1ee_UL(par,da1dim1ee , da1dim2ee,  0 ,  110.0 ,  zd1ee ,xd1ee  , data1ee , error1ee, 0)
    +chis2ee_UC(par,da2dim1ee , da2dim2ee,  0 , 110.0 ,   zd1ee ,xd1ee  , data2ee , error2ee, 1)
    +chis3ee_pt0_UL(par,da3dim1ee , da3dim2ee,  0 , 110.0,    zd3ee ,xd3ee  , data3ee , error3ee,pt3ee  , 2)
    +chis4ee_pt0_UC(par,da4dim1ee , da4dim2ee,  0 , 110.0   ,   zd4ee ,xd4ee  , data4ee , error4ee,pt4ee  , 3)
; 

    cout<<f<<","<<par[0]<<","<<par[1]<<","<<par[2]<<","<<par[3]<<","<<par[4]<<","<<par[5]<<","<<par[6]  <<endl;    
   
tend = time(0);

cout << "One rountine   took " << difftime(tend, tstart) << " second(s)." << endl;
  
}





int main()
{

time_t tstart, tend;
tstart = time(0);



    unpo_UL_r(da1dim1ee , da1dim2ee,   110.0,  zd1ee ,xd1ee );
      unpo_UC_r(da2dim1ee , da2dim2ee,   110.0,  zd1ee ,xd1ee );
     unpo_UL_pt_r(da3dim1ee , da3dim2ee,   110.0,  zd3ee ,xd3ee ,pt3ee);
     unpo_UC_pt_r(da4dim1ee , da4dim2ee,   110.0,  zd4ee ,xd4ee ,pt4ee);


 
 static double vstart[16] = {0.01           ,0.1           ,1         ,-0.1     };
static double step[10]    = {0.001                                     };
 static double lowL[10]   = {0.005          ,-10            ,0         ,-10     };
 static double upL[10]    = {0.035          ,10              ,10       ,10     };


  Double_t tpar[20];
  Double_t etpar[20];
  Double_t a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20;
  Double_t a0rr, a1rr,a2rr,a3rr,a4rr,a5rr,a6rr,a7rr,a8rr,a9rr,a10rr,a11rr,a12rr,a13rr,a14rr,a15rr,a16rr,a17rr,a18rr,a19rr,a20rr;


   TMinuit *gMinuit = new TMinuit(20);  //initialize TMinuit with a maximum of 5 params
   gMinuit->SetFCN(fcn);
   gMinuit->SetErrorDef(1);
   Double_t arglist[10];
   Int_t ierflg = 0;



    gMinuit->mnparm(0, "BLNY",  vstart[0], step[0], lowL[0],upL[0],ierflg);
    gMinuit->mnparm(1, "Nu",    vstart[1], step[0], lowL[1],upL[1],ierflg);
    gMinuit->mnparm(2, "Nd",    vstart[3], step[0], lowL[3],upL[3],ierflg);
    gMinuit->mnparm(3, "au",    vstart[2], step[0], lowL[2],upL[2],ierflg);
    gMinuit->mnparm(4, "ad",    vstart[2], step[0], lowL[2],upL[2],ierflg);
    gMinuit->mnparm(5, "bu",    vstart[2], step[0], lowL[2],upL[2],ierflg);
    gMinuit->mnparm(6, "bd",    vstart[2], step[0], lowL[2],upL[2],ierflg);
 


 


     arglist[0] = 5000;
     arglist[1] =0.1;

    gMinuit->mnexcm("MIGRAD", arglist ,2,ierflg);


    Double_t amin,edm;
    Int_t nvpar,nparx,icstat;
    Double_t errdef;

    gMinuit->mnstat(amin,edm,errdef,nvpar,nparx,icstat);
    gMinuit->mnprin(3,amin);
    //       gMinuit->mnimpr();


    gMinuit->GetParameter(0,a0, a0rr  );
    gMinuit->GetParameter(1,a1, a1rr  );
    gMinuit->GetParameter(2,a2, a2rr  );
    gMinuit->GetParameter(3,a3, a3rr  );
    gMinuit->GetParameter(4,a4, a4rr  );
    gMinuit->GetParameter(5,a5, a5rr  );
    gMinuit->GetParameter(6,a6, a6rr  );
 


  a0=       1.97919e-02  ;
  a1=       1.00000e+01  ;
  a2=      -1.53931e+00  ;
  a3=       7.96969e+00  ;
  a4=       1.43211e+00  ;
  a5=       1.18983e+00  ;
  a6=       7.20196e-09  ;


 // BNLYit=1.97919e-02;
 // Nuit=1.00000e+01  ;
 // Ndit=-1.53931e+00 ;
 // auit=7.96969e+00  ;
 // adit=1.43211e+00  ;
 // buit=1.18983e+00  ;
 // bdit=7.20196e-09  ;



       tpar[0]=a0;tpar[1]=a1;tpar[2]=a2;tpar[3]=a3;tpar[4]=a4;tpar[5]=a5;tpar[6]=a6;
       //     tpar[7]=a7;tpar[8]=a8;tpar[9]=a9;tpar[10]=a10;tpar[11]=a11;tpar[12]=a12;tpar[13]=a13;
       //       tpar[14]=a14;tpar[15]=a15;tpar[16]=a16;tpar[17]=a17;tpar[18]=a18;

  
        chis1ee_UL(tpar, da1dim1ee ,  da1dim2ee,   0 ,  110.0  ,   zd1ee ,xd1ee  , data1ee , error1ee, 0)     ;
        chis2ee_UC(tpar, da2dim1ee ,  da2dim2ee,   0 ,  110.0 ,   zd1ee ,xd1ee  , data2ee , error2ee, 1)     ;

       
        chis3ee_pt0_UL(tpar,da3dim1ee , da3dim2ee,  0 , 110.0,    zd3ee ,xd3ee  , data3ee , error3ee,pt3ee  , 2);
        chis4ee_pt0_UC(tpar,da4dim1ee , da4dim2ee,  0 , 110.0   ,   zd4ee ,xd4ee  , data4ee , error4ee,pt4ee  , 3);


// // //  TCanvas *c0= new TCanvas("c0", "AS_Collins",10,10, 1200, 600) ;
// // //  c0->Divide(4,3);

// // //  TGraphErrors * figda0[10];
// // //   TGraph * figth0[10];
// // //  for(int i= 0 ; i< 4 ;++i  ){

// // //  c0->cd(i+1);
// // //  figda0[i]= new TGraphErrors(4, xd1ee[i], data1ee[i],0,error1ee[i]);

// // //  figda0[i]->SetMarkerStyle(20);
// // //  figda0[i]->SetMarkerColor(2); 
// // //  figda0[i]->Draw("ap");


// // //  figth0[i]= new TGraph( 4  ,xd1ee[i] , resee[0][i]);
// // //  figth0[i]->SetTitle("U-L");
// // //  figth0[i]->SetLineWidth(3);
// // //  figth0[i]->Draw("c");
// // //  }

// // //  for(int i= 4 ; i< 10 ;++i  ){

// // //  c0->cd(i+1);
// // //  figda0[i]= new TGraphErrors(6, xd1ee[i], data1ee[i],0,error1ee[i]);

// // //  figda0[i]->SetMarkerStyle(20);
// // //  figda0[i]->SetMarkerColor(2); 
// // //  figda0[i]->Draw("ap");


// // //  figth0[i]= new TGraph( 6  ,xd1ee[i] , resee[0][i]);
// // //  figth0[i]->SetTitle("U-L");
// // //  figth0[i]->SetLineWidth(3);
// // //  figth0[i]->Draw("c");
// // //  }



// // // c0->Write();
// // // c0->Print("c0_UL.ps");

// // // //////////////////////////////////////////////////////////////////////////////////


// // //  TCanvas *c1= new TCanvas("c1", "AS_Collins",10,10, 1200, 600) ;
// // //  c1->Divide(4,3);

// // //  TGraphErrors * figda1[10];
// // //   TGraph * figth1[10];
// // //  for(int i= 0 ; i< 4 ;++i  ){

// // //  c1->cd(i+1);
// // //  figda1[i]= new TGraphErrors(4, xd1ee[i], data2ee[i],0,error2ee[i]);

// // //  figda1[i]->SetMarkerStyle(20);
// // //  figda1[i]->SetMarkerColor(2); 
// // //  figda1[i]->Draw("ap");


// // //  figth1[i]= new TGraph( 4  ,xd1ee[i] , resee[1][i]);
// // //  figth1[i]->SetTitle("U-C");
// // //  figth1[i]->SetLineWidth(3);
// // //  figth1[i]->Draw("c");
// // //  }

// // //  for(int i= 4 ; i< 10 ;++i  ){

// // //  c1->cd(i+1);
// // //  figda1[i]= new TGraphErrors(6, xd1ee[i], data2ee[i],0,error2ee[i]);

// // //  figda1[i]->SetMarkerStyle(20);
// // //  figda1[i]->SetMarkerColor(2); 
// // //  figda1[i]->Draw("ap");


// // //  figth1[i]= new TGraph( 6  ,xd1ee[i] , resee[1][i]);
// // //  figth1[i]->SetTitle("U-C");
// // //  figth1[i]->SetLineWidth(3);
// // //  figth1[i]->Draw("c");
// // //  }

// // // c1->Write();
// // // c1->Print("c1_UC.ps");

// // // ///////////////////////////////////////////////////////////////////////////////////////////////////
 
// // //  TCanvas *c2= new TCanvas("c2", "AS_Collins",10,10, 1200, 600) ;
// // //  c2->Divide(1,1);

// // //  TGraphErrors * figda2;
// // //   TGraph * figth2;

// // //  c2->cd(1);
// // //  figda2= new TGraphErrors(9, pt3ee[0], data3ee[0],0,error3ee[0]);

// // //  figda2->SetMarkerStyle(20);
// // //  figda2->SetMarkerColor(2); 
// // //  figda2->Draw("ap");


// // //  figth2= new TGraph( 9  , pt3ee[0]   , resee[2][0]);
// // //  figth2->SetTitle("U-L");
// // //  figth2->SetLineWidth(3);
// // //  figth2->Draw("c");

// // // c2->Write();
// // // c2->Print("c2_UL.ps");


// // // ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// // //  TCanvas *c3= new TCanvas("c2", "AS_Collins",10,10, 1200, 600) ;
// // //  c3->Divide(1,1);

// // //  TGraphErrors * figda3;
// // //   TGraph * figth3;

// // //  c3->cd(1);
// // //  figda3= new TGraphErrors(9, pt4ee[0], data4ee[0],0,error4ee[0]);

// // //  figda3->SetMarkerStyle(20);
// // //  figda3->SetMarkerColor(2); 
// // //  figda3->Draw("ap");


// // //  figth3= new TGraph( 9  , pt4ee[0]   , resee[3][0]);
// // //  figth3->SetTitle("U-C");
// // //  figth3->SetLineWidth(3);
// // //  figth3->Draw("c");

// // // c3->Write();
// // // c3->Print("c3_UC.ps");

// // // ///////////////////////////////////////////////////////////////////////////////////////////////////////


// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  TH1 *frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[0][0]-0.015);
// // //    frame->SetMaximum(data1ee[0][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda0[0]->Draw("p");
// // //  figth0[0]->SetLineWidth(2);
// // //  figth0[0]->Draw("c");


// // // TLatex *tex ;
// // //    tex = new TLatex(0.05,data1ee[0][2], "0.2 < z_{1} < 0.3 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();

// // //  tex = new TLatex(0.05,data1ee[0][3], "BELLE  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UL_0.C" );
// // //    c2->Print("ee_Belle_UL_0.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[1][0]-0.015);
// // //    frame->SetMaximum(data1ee[1][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda0[1]->Draw("p");

// // //  figth0[1]->SetLineWidth(2);
// // //  figth0[1]->Draw("c");




// // //  tex = new TLatex(0.05,data1ee[1][2], "0.3 < z_{1} < 0.5 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[1][3], "BELLE");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UL_1.C" );
// // //     c2->Print("ee_Belle_UL_1.eps" );


// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[2][0]-0.015);
// // //    frame->SetMaximum(data1ee[2][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  

// // //  figda0[2]->Draw("p");

// // //  figth0[2]->SetLineWidth(2);
// // //  figth0[2]->Draw("c");




// // //  tex = new TLatex(0.05,data1ee[2][2], "0.5 < z_{1} < 0.7  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[2][3], "BELLE");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UL_2.C" );

// // //   c2->Print("ee_Belle_UL_2.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[3][0]-0.015);
// // //    frame->SetMaximum(data1ee[3][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2} ");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda0[3]->Draw("p");

// // //  figth0[3]->SetLineWidth(2);
// // //  figth0[3]->Draw("c");
 



// // //  tex = new TLatex(0.05,data1ee[3][2], "0.7 < z_{1} < 1.0");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[3][3], "BELLE");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UL_3.C" );

// // // c2->Print("ee_Belle_UL_3.eps" );


// // // /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
// // //  c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // // frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[4][0]-0.015);
// // //    frame->SetMaximum(data1ee[4][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda0[4]->Draw("p");
// // //  figth0[4]->SetLineWidth(2);
// // //  figth0[4]->Draw("c");


// // //    tex = new TLatex(0.05,data1ee[4][4], "0.15 < z_{1} < 0.2 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();

// // //  tex = new TLatex(0.05,data1ee[4][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UL_4.C" );
// // //    c2->Print("ee_Babar_UL_4.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[5][0]-0.01);
// // //    frame->SetMaximum(data1ee[5][5]+0.01);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda0[5]->Draw("p");

// // //  figth0[5]->SetLineWidth(2);
// // //  figth0[5]->Draw("c");




// // //  tex = new TLatex(0.05,data1ee[5][4], "0.2 < z_{1} < 0.3 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[5][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UL_5.C" );
// // //     c2->Print("ee_Babar_UL_5.eps" );


// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[6][0]-0.015);
// // //    frame->SetMaximum(data1ee[6][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  

// // //  figda0[6]->Draw("p");

// // //  figth0[6]->SetLineWidth(2);
// // //  figth0[6]->Draw("c");




// // //  tex = new TLatex(0.05,data1ee[6][4], "0.3 < z_{1} < 0.4  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[6][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UL_6.C" );

// // //   c2->Print("ee_Babar_UL_6.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[7][0]-0.015);
// // //    frame->SetMaximum(data1ee[7][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda0[7]->Draw("p");

// // //  figth0[7]->SetLineWidth(2);
// // //  figth0[7]->Draw("c");
 



// // //  tex = new TLatex(0.05,data1ee[7][4], "0.4 < z_{1} < 0.5");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[7][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UL_7.C" );

// // // c2->Print("ee_Babar_UL_7.eps" );
 
// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[8][0]-0.015);
// // //    frame->SetMaximum(data1ee[8][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2} (GeV)");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  

// // //  figda0[8]->Draw("p");

// // //  figth0[8]->SetLineWidth(2);
// // //  figth0[8]->Draw("c");




// // //  tex = new TLatex(0.05,data1ee[8][4], "0.5 < z_{1} < 0.7  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[8][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UL_8.C" );

// // //   c2->Print("ee_Babar_UL_8.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data1ee[9][0]-0.015);
// // //    frame->SetMaximum(data1ee[9][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2} ");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda0[9]->Draw("p");

// // //  figth0[9]->SetLineWidth(2);
// // //  figth0[9]->Draw("c");
 



// // //  tex = new TLatex(0.05,data1ee[9][4], "0.7 < z_{1} < 0.9");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data1ee[9][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UL_9.C" );

// // // c2->Print("ee_Babar_UL_9.eps" );
 



// // // //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // // frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[0][0]-0.015);
// // //    frame->SetMaximum(data2ee[0][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda1[0]->Draw("p");
// // //  figth1[0]->SetLineWidth(2);
// // //  figth1[0]->Draw("c");



// // //    tex = new TLatex(0.05,data2ee[0][2], "0.2 < z_{1} < 0.3 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();

// // //  tex = new TLatex(0.05,data2ee[0][3], "BELLE  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UC_0.C" );
// // //    c2->Print("ee_Belle_UC_0.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[1][0]-0.015);
// // //    frame->SetMaximum(data2ee[1][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda1[1]->Draw("p");

// // //  figth1[1]->SetLineWidth(2);
// // //  figth1[1]->Draw("c");




// // //  tex = new TLatex(0.05,data2ee[1][2], "0.3 < z_{1} < 0.5 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[1][3], "BELLE");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UC_1.C" );
// // //     c2->Print("ee_Belle_UC_1.eps" );


// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[2][0]-0.015);
// // //    frame->SetMaximum(data2ee[2][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  

// // //  figda1[2]->Draw("p");

// // //  figth1[2]->SetLineWidth(2);
// // //  figth1[2]->Draw("c");




// // //  tex = new TLatex(0.05,data2ee[2][2], "0.5 < z_{1} < 0.7  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[2][3], "BELLE");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UC_2.C" );

// // //   c2->Print("ee_Belle_UC_2.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[3][0]-0.015);
// // //    frame->SetMaximum(data2ee[3][3]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2} ");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda1[3]->Draw("p");

// // //  figth1[3]->SetLineWidth(2);
// // //  figth1[3]->Draw("c");
 



// // //  tex = new TLatex(0.05,data2ee[3][2], "0.7 < z_{1} < 1.0");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[3][3], "BELLE");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Belle_UC_3.C" );

// // // c2->Print("ee_Belle_UC_3.eps" );


// // // /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
// // //  c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // // frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[4][0]-0.015);
// // //    frame->SetMaximum(data2ee[4][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda1[4]->Draw("p");
// // //  figth1[4]->SetLineWidth(2);
// // //  figth1[4]->Draw("c");


// // //    tex = new TLatex(0.05,data2ee[4][4], "0.15 < z_{1} < 0.2 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();

// // //  tex = new TLatex(0.05,data2ee[4][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UC_4.C" );
// // //    c2->Print("ee_Babar_UC_4.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[5][0]-0.01);
// // //    frame->SetMaximum(data2ee[5][5]+0.01);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda1[5]->Draw("p");

// // //  figth1[5]->SetLineWidth(2);
// // //  figth1[5]->Draw("c");




// // //  tex = new TLatex(0.05,data2ee[5][4], "0.2 < z_{1} < 0.3 ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[5][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UC_5.C" );
// // //     c2->Print("ee_Babar_UC_5.eps" );


// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[6][0]-0.015);
// // //    frame->SetMaximum(data2ee[6][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  

// // //  figda1[6]->Draw("p");

// // //  figth1[6]->SetLineWidth(2);
// // //  figth1[6]->Draw("c");




// // //  tex = new TLatex(0.05,data2ee[6][4], "0.3 < z_{1} < 0.4  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[6][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UC_6.C" );

// // //   c2->Print("ee_Babar_UC_6.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[7][0]-0.015);
// // //    frame->SetMaximum(data2ee[7][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda1[7]->Draw("p");

// // //  figth1[7]->SetLineWidth(2);
// // //  figth1[7]->Draw("c");
 



// // //  tex = new TLatex(0.05,data2ee[7][4], "0.4 < z_{1} < 0.5");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[7][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UC_7.C" );

// // // c2->Print("ee_Babar_UC_7.eps" );
 
// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

 
// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[8][0]-0.015);
// // //    frame->SetMaximum(data2ee[8][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2}");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  

// // //  figda1[8]->Draw("p");

// // //  figth1[8]->SetLineWidth(2);
// // //  figth1[8]->Draw("c");




// // //  tex = new TLatex(0.05,data2ee[8][4], "0.5 < z_{1} < 0.7  ");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[8][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UC_8.C" );

// // //   c2->Print("ee_Babar_UC_8.eps" );

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,0.9);
// // //    frame->SetMinimum(data2ee[9][0]-0.015);
// // //    frame->SetMaximum(data2ee[9][5]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("z_{2} ");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda1[9]->Draw("p");

// // //  figth1[9]->SetLineWidth(2);
// // //  figth1[9]->Draw("c");
 



// // //  tex = new TLatex(0.05,data2ee[9][4], "0.7 < z_{1} < 0.9");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();
   




// // //  tex = new TLatex(0.05,data2ee[9][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UC_9.C" );

// // // c2->Print("ee_Babar_UC_9.eps" );

// // // /////////////////////////////////////////////////////////////////////////////////////////

// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,1.3);
// // //    frame->SetMinimum(data3ee[0][0]-0.015);
// // //    frame->SetMaximum(data3ee[0][8]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("P_{ht} (GeV) ");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UL}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda2->Draw("p");

// // //  figth2->SetLineWidth(2);
// // //  figth2->Draw("c");
 





// // //  tex = new TLatex(0.05,data3ee[9][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UL_Pt.C" );

// // // c2->Print("ee_Babar_UL_Pt.eps" );


// // // /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// // // c2= new TCanvas("c2", "distribution", 0 ,0 , 700, 700) ;
// // //   c2->SetTickx();
// // //    c2->SetTicky();

// // //  frame = new TH1F("frame","",1000,0,1.3);
// // //    frame->SetMinimum(data4ee[0][0]-0.015);
// // //    frame->SetMaximum(data4ee[0][8]+0.015);
// // //    frame->SetDirectory(0);
// // //    frame->SetStats(0);
// // //    frame->GetXaxis()->SetTitle("P_{ht} (GeV) ");
// // //    frame->GetXaxis()->SetTickLength(0.04);
// // //    frame->GetXaxis()->SetLabelSize(0.04);
// // //    frame->GetYaxis()->SetTitle("A_{0,UC}");
// // //    //  frame->GetYaxis()->SetMoreLogLabels();
// // //    frame->GetYaxis()->SetLabelSize(0.04);
// // //    frame->Draw(" ");
// // //    //   c2->SetLogy();  
  
// // //  figda3->Draw("p");

// // //  figth3->SetLineWidth(2);
// // //  figth3->Draw("c");
 





// // //  tex = new TLatex(0.05,data3ee[9][5], "BABAR");
// // //    tex->SetTextSize(0.06);
// // //    tex->SetTextColor(12);
// // //    tex->Draw();   

// // // c2->Write();


// // //    c2->SaveAs("ee_Babar_UC_Pt.C" );

// // // c2->Print("ee_Babar_UC_Pt.eps" );

// double   ymax  = 12.;        //      ! max value of ln 1/x
//  double   dy    = 0.1;        //     ! the internal grid spacing (smaller->higher accuarcy)
//                                 // ! 0.1 should provide at least 10^{-3} accuracy 
//  double   Qmin  = 1.;  //   ! smallest Q value in tabulation
//  double   Qmax  = 1e+4;       // ! largest Q value in tabulation
//  double   dlnlnQ = dy/4.;     // ! tabulation spacing in dlnlnQ (dy/4 recommended)
//  int   nloop  = 1;            // ! the number of loops to initialise (max=3!)
//  int   order  = -6;           // ! numerical interpolation order (-6 is a good choice)

//  int   scheme = 5;            // ! 1=unpol-MSbar, 2=unpol-DIS, 3=Pol-MSbar, 
//                                 // ! 4=frag, 5=TransMsbar

// hoppetStartExtended(ymax,dy,Qmin,Qmax,dlnlnQ,nloop,order,
//                               scheme);


//  double asQ0 = 0.35, Q0=sqrt(2.4);


//   hoppetEvolve(asQ0, Q0, nloop, 1.0, heralhc_init, Q0);  

//   cout<<pof_u_pi(0.2, 3.0  )<<endl;
//   cout<<pof_u_mpi(0.2, 3.0  )<<endl;
//   cout<<pof_ub_pi(0.2, 3.0  )<<endl;
//   cout<<pof_ub_mpi(0.2, 3.0  )<<endl;
//   cout<<pof_d_pi(0.2, 3.0  )<<endl;
//   cout<<pof_d_mpi(0.2, 3.0  )<<endl;
//   cout<<pof_db_pi(0.2, 3.0  )<<endl;
//   cout<<pof_db_mpi(0.2, 3.0  )<<endl;
// double pdf[13];
//   double xvals[9]={1e-5,1e-4,1e-3,1e-2,0.1,0.3,0.5,0.7,0.9};
//   double Q = 100;
//   printf("           Evaluating PDFs at Q = %8.3f GeV\n",Q);
//   printf("    x      u-ubar      d-dbar    2(ubr+dbr)    c+cbar       gluon\n");
//   for (int ix = 0; ix < 9; ix++) {
//     hoppetEval(xvals[ix], Q, pdf);
//     printf("%7.1E %11.4E %11.4E %11.4E %11.4E %11.4E\n",xvals[ix],
//            pdf[6+2]-pdf[6-2], 
//            pdf[6+1]-pdf[6-1], 
//            2*(pdf[6-1]+pdf[6-2]),
//            (pdf[6-4]+pdf[6+4]),
//            pdf[6+0]);
//   }  


cout<<"done"<<endl;
tend = time(0);
cout << "Total programe took " << difftime(tend, tstart) << " second(s)." << endl;
 return 0;
}



